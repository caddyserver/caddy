# Used as inspiration: https://github.com/mvdan/github-actions-golang

name: Cross-Platform Tests

on:
  push:
    branches: [ v2 ]
  pull_request:
    branches: [ v2 ]

jobs:
  test:
    name: Cross-Platform Tests

    strategy:
      matrix:
        # os: [ ubuntu-latest, macos-latest, windows-latest ]
        os: [ ubuntu-latest ]
        go-version: [ 1.14.x ]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go-version }}

    - name: Checkout code
      uses: actions/checkout@v2

    # Only run lint on ubuntu, the reviewdog action uses docker
    # - name: Run lint check
    #   if: matrix.os == 'ubuntu-latest'
    #   uses: reviewdog/action-golangci-lint@v1
    #   with:
    #     github_token: ${{ secrets.github_token }}

    - name: Install test and coverage analysis tools
      run: |
        go get github.com/axw/gocov/gocov
        go get github.com/AlekSi/gocov-xml
        go get -u github.com/jstemmer/go-junit-report
        echo "::add-path::$(go env GOPATH)/bin"

    - name: Print Go version and environment
      run: |
        printf "Using go at: $(which go)\n"
        printf "Go version: $(go version)\n"
        printf "\n\nGo environment:\n\n"
        go env
        printf "\n\nSystem environment:\n\n"
        env

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        # mkdir test-results

    # TODO Might not be in the correct dir at this point
    - name: Build Caddy
      working-directory: ./cmd/caddy
      run: |
        CGO_ENABLED=0 go build -trimpath -a -ldflags="-w -s" -v

    - name: Publish Build Artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v1
      with:
        name: caddy_v2_${{ matrix.os }}
        path: ./cmd/caddy/caddy.exe

    - name: Publish Build Artifact (Linux/Mac)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v1
      with:
        name: caddy_v2_${{ matrix.os }}
        path: ./cmd/caddy/caddy

    # For info about set-output, see https://stackoverflow.com/questions/57850553/github-actions-check-steps-status
    - name: Run tests
      id: step_test
      continue-on-error: true
      run: |
        # (go test -v -coverprofile=cover-profile.out -race ./... 2>&1) > test-results/test-result.out
        go test -v -coverprofile=cover-profile.out -race ./...
        echo "::set-output name=status::$?"

    - name: Prepare coverage reports
      run: |
        mkdir coverage
        gocov convert cover-profile.out > coverage/coverage.json
        # Because Windows doesn't work with input redirection like *nix, but output redirection works.
        (cat ./coverage/coverage.json | gocov-xml) > coverage/coverage.xml

    # TODO publish coverage/lint/test results ?

    # To return the correct result even though we set 'continue-on-error: true'
    - name: Coerce correct build result
      if: steps.step_lint.outputs.status != 0 || steps.step_test.outputs.status != 0
      run: |
        exit 1
