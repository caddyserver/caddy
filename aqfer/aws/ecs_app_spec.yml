AWSTemplateFormatVersion: '2010-09-09'
Description: ECS deployment
Parameters:
  AWSAccount:
    Description: Aws Account Id
    Type: String
  Ami:
    Default: ami-55ef662f
    Description: Ami template for linux EC2 instance
    Type: String
  AppLogGroupName:
    Description: App LogGroup Name for Aqfer
    Type: String
  ContainerName:
    Description: Docker container name
    Type: String
  EC2InstanceRoleName:
    Description: IAM Role name for EC2 instances
    Type: String
  EC2InstanceType:
    Default: t2.micro
    Description: EC2 Instance Type
    Type: String
  EC2SecurityGroupName:
    Description: Security Group name for EC2 instances
    Type: String
  ECRRepoURI:
    Description: Repo URI for uplated ECR container
    Type: String
  ECSClusterName:
    Description: ECS Cluster name
    Type: String
  ECSLogGroupName:
    Description: ECS LogGroup Name for Aqfer
    Type: String
  ECSServiceName:
    Description: ECS Service name
    Type: String
  ECSServiceRoleName:
    Description: ECS Service Role name
    Type: String
  ECSTaskDefinitionName:
    Description: ECS Task Definition name
    Type: String
  Id:
    Description: AWS access key id
    Type: String
  Jwt:
    Description: JWT secret
    Type: String
  KeyPair:
    Description: EC2 Key Pair
    Type: String
  LBSecurityGroupName:
    Description: Load Balancer security group name
    Type: String
  LoadBalancerName:
    Description: Application Load Balancer name
    Type: String
  Secret:
    Description: AWS access secret key
    Type: String
  Subnet:
    Description: Subnet 1 in Availability Zone
    Type: String
  Subnet2:
    Description: Subnet 2 in Availability Zone
    Type: String
  TargetGroupName:
    Description: Target Group name
    Type: String
  Vpc:
    Description: VPC Identifier
    Type: String
Resources:
  ApplicationLoadBalancer:
    Properties:
      IpAddressType: ipv4
      Name:
        Ref: LoadBalancerName
      Scheme: internet-facing
      Subnets:
      - Ref: Subnet
      - Ref: Subnet2
      Type: network
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  ApplicationLogGroup:
    Properties:
      LogGroupName:
        Ref: AppLogGroupName
    Type: AWS::Logs::LogGroup
  AutoScalingGroup:
    Properties:
      Cooldown: 300
      DesiredCapacity: 1
      HealthCheckGracePeriod: 0
      HealthCheckType: EC2
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      LoadBalancerNames: []
      MaxSize: 1
      MinSize: 0
      TargetGroupARNs: []
      TerminationPolicies:
      - Default
      VPCZoneIdentifier:
      - Ref: Subnet
    Type: AWS::AutoScaling::AutoScalingGroup
  EC2InstanceProfile:
    Properties:
      Roles:
      - Ref: EC2InstanceRole
    Type: AWS::IAM::InstanceProfile
  EC2InstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - s3:Get*
            - s3:List*
            Effect: Allow
            Resource: '*'
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:logs:us-east-1:${AWSAccount}:log-group:*
          - Action:
            - cloudformation:*
            - codedeploy:*
            - ec2:*
            - ecs:*
            - ecr:*
            - iam:AddRoleToInstanceProfile
            - iam:CreateInstanceProfile
            - iam:CreateRole
            - iam:DeleteInstanceProfile
            - iam:DeleteRole
            - iam:DeleteRolePolicy
            - iam:GetRole
            - iam:PassRole
            - iam:PutRolePolicy
            - iam:RemoveRoleFromInstanceProfile
            Effect: Allow
            Resource: '*'
        PolicyName: ECSPolicy
      RoleName:
        Ref: EC2InstanceRoleName
    Type: AWS::IAM::Role
  EC2SecurityGroup:
    Properties:
      GroupDescription: EC2 Instance Security Group
      GroupName:
        Ref: EC2SecurityGroupName
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '8082'
        IpProtocol: tcp
        ToPort: '8082'
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      VpcId:
        Ref: Vpc
    Type: AWS::EC2::SecurityGroup
  ECSCluster:
    Properties:
      ClusterName:
        Ref: ECSClusterName
    Type: AWS::ECS::Cluster
  ECSLogGroup:
    Properties:
      LogGroupName:
        Ref: ECSLogGroupName
    Type: AWS::Logs::LogGroup
  ECSService:
    DependsOn: LBListener
    Properties:
      Cluster:
        Ref: ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 4
      LaunchType: EC2
      LoadBalancers:
      - ContainerName:
          Ref: ContainerName
        ContainerPort: 8082
        TargetGroupArn:
          Ref: LBTargetGroup
      PlacementStrategies:
      - Field: attribute:ecs.availability-zone
        Type: spread
      - Field: instanceId
        Type: spread
      Role:
        Ref: ECSServiceRole
      ServiceName:
        Ref: ECSServiceName
      TaskDefinition:
        Ref: ECSTaskDefinition
    Type: AWS::ECS::Service
  ECSServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ecs.amazonaws.com
        Version: '2008-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - elasticloadbalancing:RegisterTargets
            Effect: Allow
            Resource: '*'
        PolicyName: ECSPolicy
      RoleName:
        Ref: ECSServiceRoleName
    Type: AWS::IAM::Role
  ECSTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command: []
        Cpu: 512
        DnsSearchDomains: []
        DnsServers: []
        DockerLabels: {}
        DockerSecurityOptions: []
        EntryPoint: []
        Environment:
        - Name: AWS_ACCESS_KEY_ID
          Value:
            Ref: Id
        - Name: AWS_SECRET_ACCESS_KEY
          Value:
            Ref: Secret
        - Name: AWS_REGION
          Value:
            Fn::Sub: ${AWS::Region}
        - Name: JWT_SECRET
          Value:
            Ref: Jwt
        Essential: true
        ExtraHosts: []
        Image:
          Ref: ECRRepoURI
        Links: []
        LinuxParameters:
          Capabilities: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: ECSLogGroupName
            awslogs-region:
              Fn::Sub: ${AWS::Region}
            awslogs-stream-prefix: ecs
        Memory: 400
        MountPoints: []
        Name:
          Ref: ContainerName
        PortMappings:
        - ContainerPort: 80
          HostPort: 0
          Protocol: tcp
        - ContainerPort: 8082
          HostPort: 0
          Protocol: tcp
        Privileged: false
        ReadonlyRootFilesystem: false
        Ulimits:
        - HardLimit: 1024000
          Name: nofile
          SoftLimit: 1024000
        VolumesFrom: []
      Family:
        Ref: ECSTaskDefinitionName
      PlacementConstraints: []
      Volumes: []
    Type: AWS::ECS::TaskDefinition
  LBListener:
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: LBTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  LBTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 5
      Name:
        Ref: TargetGroupName
      Port: 80
      Protocol: TCP
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: Vpc
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  LaunchConfiguration:
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
          - runtask
        runtask:
          commands:
            c:
              command: service awslogs restart
            d:
              command: sudo service docker restart
            e:
              command: sudo start ecs
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
      - DeviceName: /dev/xvdcz
        Ebs:
          VolumeSize: 22
          VolumeType: gp2
      EbsOptimized: false
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      ImageId:
        Ref: Ami
      InstanceType:
        Ref: EC2InstanceType
      KeyName:
        Ref: KeyPair
      SecurityGroups:
      - Ref: EC2SecurityGroup
      UserData:
        Fn::Base64:
          Fn::Sub: "#!/bin/bash\nsudo yum update\n\n# Setup for EC2 instance to register\
            \ to ECS cluster\nsudo yum install -y ecs-init\necho ECS_CLUSTER=${ECSClusterName}\
            \ >> /etc/ecs/ecs.config\necho ECS_LOGLEVEL=debug >> /etc/ecs/ecs.config\n\
            echo ECS_AVAILABLE_LOGGING_DRIVERS=[\\\"awslogs\\\"] >> /etc/ecs/ecs.config\n\
            \n# Cloudformation setup to signal and error -- cfn-bootstrap not needed\
            \ with current ami\n# wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm\n\
            yum -y install aws-cfn-bootstrap-latest.amzn1.noarch.rpm\nfunction error_exit\
            \ {\n  /opt/aws/bin/cfn-signal -e 1 --reason \"$1\" --stack ${AWS::StackName}\
            \ --resource LaunchConfiguration --region ${AWS::Region}\n  exit 1\n}\n\
            \n# Setup for ecs-agent cloudwatch logs configuration\necho [/var/log/ecs/ecs-agent.log]\
            \ >> /ecs_logs.conf\necho file = /var/log/ecs/ecs-agent.log.* >> /ecs_logs.conf\n\
            echo log_group_name = /var/log/ecs/ecs-agent.log >> /ecs_logs.conf\necho\
            \ log_stream_name = ${ECSClusterName}/INSTANCE_ID >> /ecs_logs.conf\n\
            /opt/aws/bin/ec2-metadata -i | sed 's/instance-id: //' >> /instance_id\n\
            cat /ecs_logs.conf | sed ''s/INSTANCE_ID/''$(cat /instance_id)''/'' >\
            \ /ecs_logs.conf\nmkdir -p /var/awslogs/etc/config\nln -s /ecs_logs.conf\
            \ /var/awslogs/etc/config/ecs_logs.conf\n\n# Setup awslogs agent, signal\
            \ ecs setup complete\nwget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\
            \ || error_exit 'Failed to download AWS Logs Agent.'\nchmod +x ./awslogs-agent-setup.py\n\
            python awslogs-agent-setup.py -n -r ${AWS::Region} -c s3://aws-codedeploy-us-east-1/cloudwatch/awslogs.conf\
            \ || error_exit 'Failed run awslogs-agent-setup.py.'\n/opt/aws/bin/cfn-signal\
            \ -e 0 --reason \"AWS ECS Agent setup complete.\" --stack ${AWS::StackName}\
            \ --resource LaunchConfiguration --region ${AWS::Region}\n\n# Start Cloudformation\
            \ Init\n/opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource LaunchConfiguration\
            \ --region ${AWS::Region}\n"
    Type: AWS::AutoScaling::LaunchConfiguration
