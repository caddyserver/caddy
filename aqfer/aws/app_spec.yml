AWSTemplateFormatVersion: '2010-09-09'
Description: ECS deployment
Parameters:
  AWSAccount:
    Description: Aws Account Id
    Type: String
  Ami:
    Default: ami-55ef662f
    Description: Ami template for linux EC2 instance
    Type: String
  AppName:
    Description: Root name and version combination, for use in other components
    Type: String
  ClusterName:
    Description: ECS Cluster name
    Type: String
  DynamoTableName:
    Description: Name for Dynamo table
    Type: String
  EC2InstanceRoleName:
    Description: IAM Role name for EC2 instances
    Type: String
  ECRRepoURI:
    Description: Repo URI for uplated ECR container
    Type: String
  Id:
    Description: AWS access key id
    Type: String
  InstanceType:
    Default: t2.micro
    Description: EC2 Instance Type
    Type: String
  Jwt:
    Description: JWT secret
    Type: String
  KeyPair:
    Description: EC2 Key Pair
    Type: String
  RootName:
    Description: Application Name root
    Type: String
  Secret:
    Description: AWS access secret key
    Type: String
  SecurityGroupName:
    Description: Security Group name for EC2 instances
    Type: String
  TaskDefinitionName:
    Description: ECS Task Definition name
    Type: String
  Version:
    Description: Application version
    Type: String
Resources:
  AutoScalingGroup:
    Properties:
      Cooldown: 300
      DesiredCapacity: 1
      HealthCheckGracePeriod: 0
      HealthCheckType: EC2
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      LoadBalancerNames: []
      MaxSize: 1
      MinSize: 0
      Tags: []
      TargetGroupARNs: []
      TerminationPolicies:
      - Default
      VPCZoneIdentifier:
      - subnet-7a8a5255
    Type: AWS::AutoScaling::AutoScalingGroup
  DynamoDBTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: partition-key
        AttributeType: S
      - AttributeName: sort-key
        AttributeType: S
      KeySchema:
      - AttributeName: partition-key
        KeyType: HASH
      - AttributeName: sort-key
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: DynamoTableName
    Type: AWS::DynamoDB::Table
  EC2InstanceProfile:
    Properties:
      Roles:
      - Ref: EC2InstanceRole
    Type: AWS::IAM::InstanceProfile
  EC2InstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - s3:Get*
            - s3:List*
            Effect: Allow
            Resource: '*'
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:logs:us-east-1:${AWSAccount}:log-group:*
          - Action:
            - cloudformation:*
            - codedeploy:*
            - ec2:*
            - ecs:*
            - ecr:*
            - iam:AddRoleToInstanceProfile
            - iam:CreateInstanceProfile
            - iam:CreateRole
            - iam:DeleteInstanceProfile
            - iam:DeleteRole
            - iam:DeleteRolePolicy
            - iam:GetRole
            - iam:PassRole
            - iam:PutRolePolicy
            - iam:RemoveRoleFromInstanceProfile
            Effect: Allow
            Resource: '*'
        PolicyName: ECSPolicy
      RoleName:
        Ref: EC2InstanceRoleName
    Type: AWS::IAM::Role
  ECSCluster:
    Properties:
      ClusterName:
        Fn::Sub: ${ClusterName}
    Type: AWS::ECS::Cluster
  ECSTaskDefitinition:
    Properties:
      ContainerDefinitions:
      - Command: []
        Cpu: 0
        DnsSearchDomains: []
        DnsServers: []
        DockerLabels: {}
        DockerSecurityOptions: []
        EntryPoint: []
        Environment:
        - Name: AWS_ACCESS_KEY_ID
          Value:
            Ref: Id
        - Name: AWS_SECRET_ACCESS_KEY
          Value:
            Ref: Secret
        - Name: AWS_REGION
          Value:
            Fn::Sub: ${AWS::Region}
        - Name: JWT_SECRET
          Value:
            Ref: Jwt
        Essential: true
        ExtraHosts: []
        Image:
          Ref: ECRRepoURI
        Links: []
        LinuxParameters:
          Capabilities: {}
        Memory: 300
        MountPoints: []
        Name: caddy
        PortMappings:
        - ContainerPort: 8082
          HostPort: 8082
          Protocol: tcp
        Privileged: false
        ReadonlyRootFilesystem: false
        Ulimits: []
        VolumesFrom: []
      Family:
        Ref: TaskDefinitionName
      PlacementConstraints: []
      Volumes: []
    Type: AWS::ECS::TaskDefinition
  LaunchConfiguration:
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
          - runtask
        runtask:
          commands:
            c:
              command: service awslogs restart
            d:
              command: sudo service docker restart
            e:
              command: sudo start ecs
            f:
              command:
                Fn::Sub: aws ecs run-task --cluster ${ClusterName} --task-definition
                  ${TaskDefinitionName} --region ${AWS::Region}
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
      - DeviceName: /dev/xvdcz
        Ebs:
          VolumeSize: 22
          VolumeType: gp2
      EbsOptimized: false
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      ImageId:
        Ref: Ami
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyPair
      SecurityGroups:
      - Ref: SecurityGroup
      UserData:
        Fn::Base64:
          Fn::Sub: "#!/bin/bash\n\n# Setup for EC2 instance to register to ECS cluster\n\
            sudo yum install -y ecs-init\necho ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config\n\
            echo ECS_LOGLEVEL=debug >> /etc/ecs/ecs.config\necho ECS_AVAILABLE_LOGGING_DRIVERS=''[\"\
            awslogs\"]'' >> /etc/ecs/ecs.config\n\n# Cloudformation setup to signal\
            \ and error -- cfn-bootstrap not needed with current ami\n# wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm\n\
            yum -y install aws-cfn-bootstrap-latest.amzn1.noarch.rpm\nfunction error_exit\
            \ {\n  /opt/aws/bin/cfn-signal -e 1 --reason \"$1\" --stack ${AWS::StackName}\
            \ --resource LaunchConfiguration --region ${AWS::Region}\n  exit 1\n}\n\
            \n# Setup for ecs-agent cloudwatch logs configuration\necho [/var/log/ecs/ecs-agent.log]\
            \ >> /ecs_logs.conf\necho file = /var/log/ecs/ecs-agent.log.* >> /ecs_logs.conf\n\
            echo log_group_name = /var/log/ecs/ecs-agent.log >> /ecs_logs.conf\necho\
            \ log_stream_name = ${ClusterName}/INSTANCE_ID >> /ecs_logs.conf\n/opt/aws/bin/ec2-metadata\
            \ -i | sed 's/instance-id: //' >> /instance_id\ncat /ecs_logs.conf | sed\
            \ ''s/INSTANCE_ID/''$(cat /instance_id)''/'' > /ecs_logs.conf\nmkdir -p\
            \ /var/awslogs/etc/config\nln -s /ecs_logs.conf /var/awslogs/etc/config/ecs_logs.conf\n\
            \n# Setup awslogs agent, signal ecs setup complete\nwget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\
            \ || error_exit 'Failed to download AWS Logs Agent.'\nchmod +x ./awslogs-agent-setup.py\n\
            python awslogs-agent-setup.py -n -r ${AWS::Region} -c s3://aws-codedeploy-us-east-1/cloudwatch/awslogs.conf\
            \ || error_exit 'Failed run awslogs-agent-setup.py.'\n/opt/aws/bin/cfn-signal\
            \ -e 0 --reason \"AWS ECS Agent setup complete.\" --stack ${AWS::StackName}\
            \ --resource LaunchConfiguration --region ${AWS::Region}\n\n# Start Cloudformation\
            \ Init\n/opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource LaunchConfiguration\
            \ --region ${AWS::Region}\n"
    Type: AWS::AutoScaling::LaunchConfiguration
  SecurityGroup:
    Properties:
      GroupDescription: Security Group for EC2 instances
      GroupName:
        Ref: SecurityGroupName
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        FromPort: '8082'
        IpProtocol: tcp
        ToPort: '8082'
      VpcId: vpc-f582e28d
    Type: AWS::EC2::SecurityGroup
