---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS deployment'
Mappings:
  RegionSpecificParameters:
    us-east-1:
      vpc: vpc-23d7c047
      azs: [us-east-1a, us-east-1b]
      subnets: [subnet-9cbdceea, subnet-6a2ea632]
      ami: ami-d74473ad
      hostedzoneid: Z35SXDOTRQ7X7K
    us-west-2:
      vpc: vpc-fa6ba49e
      azs: [us-west-2a, us-west-2b]
      subnets: [subnet-aadc37dc, subnet-70c51314]
      ami: ami-0bc5713607472cef7
      hostedzoneid: Z1H1FL5HABSF5
    eu-west-1:
      vpc: vpc-daa5bfbf
      azs: [eu-west-1a, eu-west-1b]
      subnets: [subnet-af529fcb, subnet-ed1de89b]
      ami: ami-0da691820db958a25
      hostedzoneid: Z32O12XQLNTSW2
  CertificateId:
    us-east-1:
      preprod: 90250d8c-396a-4c19-a488-82e301e283c0
      prod: e858c27f-84c2-4f3d-a27f-be12b453f50e
    us-west-2:
      preprod: 78b52fcf-933c-4719-a099-f7cce7a12b56
      prod: a1d7a9ef-b6ce-4164-88c3-83cd85985769
    eu-west-1:
      preprod: 108bbba1-b8ef-47d3-bcd2-1754fdca6c37
      prod: fed20ee0-943d-4cb7-9400-b539224f8781
  LoadBalancerParams:
    preprod:
      servicedomain: imds
      hostedzonename: api-preprod.aqfer.net.
    prod:
      servicedomain: imds
      hostedzonename: api.aqfer.net.
  StageConfig:
    preprod:
      auth: auth.api-preprod.aqfer.net
    prod:
      auth: auth.api.aqfer.net

Parameters:
  Id:
    Description: 'AWS access key id'
    Type: String
  Secret:
    Description: 'AWS access secret key'
    Type: String
  Jwt:
    Description: 'JWT secret'
    Type: String
  EC2InstanceType:
    Description: 'EC2 Instance Type'
    Default: 't2.micro'
    Type: String
  KeyPair:
    Description: 'EC2 Key Pair'
    Type: String
  LoadBalancerName:
    Description: 'Application Load Balancer name'
    Type: String
  LBSecurityGroupName:
    Description: 'Load Balancer security group name'
    Type: String
  TargetGroupName:
    Description: 'Target Group name'
    Type: String
  EC2SecurityGroupName:
    Description: 'Security Group name for EC2 instances'
    Type: String
  ECSServiceName:
    Description: 'ECS Service name'
    Type: String
  ECSServiceRoleName:
    Description: 'ECS Service Role name'
    Type: String
  ECSClusterName:
    Description: 'ECS Cluster name'
    Type: String
  ECSTaskDefinitionName:
    Description: 'ECS Task Definition name'
    Type: String
  ECRRepoName:
    Description: 'Repo Name for uploaded ECR container'
    Type: String
  ECRRepoRegion:
    Description: 'Repo Region for uploaded ECR container'
    Type: String
  ImageVersion:
    Description: 'Version of the docker image'
    Type: String
  ContainerName:
    Description: 'Docker container name'
    Type: String
  ECSLogGroupName:
    Description: 'ECS LogGroup Name for Aqfer'
    Type: String
  AppLogGroupName:
    Description: 'App LogGroup Name for Aqfer'
    Type: String
  ServiceStage:
    Description: 'Stage of the service'
    Type: String
    AllowedValues:
      - preprod
      - prod
  ECSecurityGroupName:
    Description: 'Name of the EC Security Group'
    Type: String
  ECInboundProtocol:
    Description: 'Protocol to allow access for the inbound traffic from EC2'
    Type: String
  ECStackName:
    Description: 'Name of the EC Stack'
    Type: String
  EC2InstanceProfileName:
    Description: 'ECS Instance profile name'
    Type: String

Resources:
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AppLogGroupName
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Ref ECSLogGroupName

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
          - runtask
        runtask:
          commands:
            c:
              command: service awslogs restart
            d:
              command: sudo service docker restart
            e:
              command: sudo start ecs
            # f:
            #   command: !Sub 'aws ecs run-task --cluster ${ECSClusterName} --task-definition ${ECSTaskDefinitionName} --region ${AWS::Region}'
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
      - DeviceName: '/dev/xvdcz'
        Ebs:
          VolumeSize: 22
          VolumeType: gp2
      EbsOptimized: false
      IamInstanceProfile: !Ref EC2InstanceProfileName
      ImageId: !FindInMap [ RegionSpecificParameters, !Ref "AWS::Region", ami ]
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref KeyPair
      SecurityGroups:
      - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update

          # Setup for EC2 instance to register to ECS cluster
          sudo yum install -y ecs-init
          echo ECS_CLUSTER=${ECSClusterName} >> /etc/ecs/ecs.config
          echo ECS_LOGLEVEL=debug >> /etc/ecs/ecs.config
          echo ECS_AVAILABLE_LOGGING_DRIVERS=[\"awslogs\"] >> /etc/ecs/ecs.config

          # Cloudformation setup to signal and error -- cfn-bootstrap not needed with current ami
          # wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm
          yum -y install aws-cfn-bootstrap-latest.amzn1.noarch.rpm
          function error_exit {
            /opt/aws/bin/cfn-signal -e 1 --reason "$1" --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
            exit 1
          }

          # Setup for ecs-agent cloudwatch logs configuration
          echo [/var/log/ecs/ecs-agent.log] >> /ecs_logs.conf
          echo file = /var/log/ecs/ecs-agent.log.* >> /ecs_logs.conf
          echo log_group_name = /var/log/ecs/ecs-agent.log >> /ecs_logs.conf
          echo log_stream_name = ${ECSClusterName}/INSTANCE_ID >> /ecs_logs.conf
          /opt/aws/bin/ec2-metadata -i | sed 's/instance-id: //' >> /instance_id
          cat /ecs_logs.conf | sed ''s/INSTANCE_ID/''$(cat /instance_id)''/'' > /ecs_logs.conf
          mkdir -p /var/awslogs/etc/config
          ln -s /ecs_logs.conf /var/awslogs/etc/config/ecs_logs.conf

          # Setup awslogs agent, signal ecs setup complete
          wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py || error_exit 'Failed to download AWS Logs Agent.'
          chmod +x ./awslogs-agent-setup.py
          python awslogs-agent-setup.py -n -r ${AWS::Region} -c s3://aws-codedeploy-us-east-1/cloudwatch/awslogs.conf || error_exit 'Failed run awslogs-agent-setup.py.'
          /opt/aws/bin/cfn-signal -e 0 --reason "AWS ECS Agent setup complete." --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}

          # Start Cloudformation Init
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !FindInMap [ RegionSpecificParameters, !Ref "AWS::Region", azs ]
      TargetGroupARNs: []
      DesiredCapacity: 2
      LoadBalancerNames: []
      Cooldown: 300
      MinSize: 0
      MaxSize: 2
      VPCZoneIdentifier: !FindInMap [ RegionSpecificParameters, !Ref "AWS::Region", subnets ]
      HealthCheckGracePeriod: 0
      HealthCheckType: EC2
      TerminationPolicies:
      - Default
      LaunchConfigurationName: !Ref LaunchConfiguration
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
        PropagateAtLaunch: true
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref EC2SecurityGroupName
      GroupDescription: 'EC2 Instance Security Group'
      VpcId: !FindInMap [ RegionSpecificParameters, !Ref "AWS::Region", vpc ]
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '8082'
        ToPort: '8082'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
  ECSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
    DependsOn:
      - EC2SecurityGroup
    Properties:
      GroupName: !Ref ECSecurityGroupName
      Description: 'Allow traffic from EC2 security group'
      IpProtocol: !Ref ECInboundProtocol
      FromPort:
        Fn::ImportValue:
          !Sub '${ECStackName}-ECInboundPort'
      ToPort:
        Fn::ImportValue:
          !Sub '${ECStackName}-ECInboundPort'
      SourceSecurityGroupName: !Ref EC2SecurityGroupName

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes: []
      Family: !Ref ECSTaskDefinitionName
      PlacementConstraints: []
      ContainerDefinitions:
      - DnsSearchDomains: []
        Environment:
        - Name: AWS_ACCESS_KEY_ID
          Value: !Ref Id
        - Name: AWS_SECRET_ACCESS_KEY
          Value: !Ref Secret
        - Name: AWS_REGION
          Value: !Ref AWS::Region
        - Name: JWT_SECRET
          Value: !Ref Jwt
        - Name: REDIS_ENDPOINT
          Value:
            Fn::ImportValue:
              !Sub '${ECStackName}-ECEndpoint'
        - Name: AUTH_ENDPOINT
          Value: !FindInMap [ StageConfig, !Ref 'ServiceStage', auth ]
        ReadonlyRootFilesystem: false
        Name: !Ref ContainerName
        Links: []
        MountPoints: []
        Image: !Sub '${AWS::AccountId}.dkr.ecr.${ECRRepoRegion}.amazonaws.com/${ECRRepoName}:${ImageVersion}'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs
            awslogs-group: !Ref ECSLogGroupName
        LinuxParameters:
          Capabilities: {}
        Essential: true
        PortMappings:
        - Protocol: tcp
          HostPort: 0
          ContainerPort: 80
        - Protocol: tcp
          HostPort: 0
          ContainerPort: 8082
        DnsServers: []
        DockerSecurityOptions: []
        EntryPoint: []
        Ulimits:
        - Name: nofile
          SoftLimit: 1024000
          HardLimit: 1024000
        Privileged: false
        Memory: 400
        Command: []
        ExtraHosts: []
        Cpu: 512
        VolumesFrom: []
        DockerLabels: {}
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
    - LBListenerHTTP
    - LBListenerHTTPS
    Properties: 
      ServiceName: !Ref ECSServiceName
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 6
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      LaunchType: EC2
      LoadBalancers:
      - ContainerName: !Ref ContainerName
        ContainerPort: 8082
        TargetGroupArn: !Ref LBTargetGroup
      PlacementStrategies: 
      - Field: attribute:ecs.availability-zone
        Type: spread
      - Field: instanceId
        Type: spread
      Role: !Ref ECSServiceRoleName

  LBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref LBTargetGroup

  LBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Join [ '', [ 'arn:aws:acm:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':certificate/' , !FindInMap [ 'CertificateId', !Ref 'AWS::Region', !Ref ServiceStage ] ] ]
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref LBTargetGroup

  LBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref TargetGroupName
      Protocol: HTTP
      Port: 80
      TargetType: instance
      VpcId: !FindInMap [ RegionSpecificParameters, !Ref "AWS::Region", vpc ]
      HealthCheckPath: '/version'
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 5
      HealthCheckIntervalSeconds: 30

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref LBSecurityGroupName
      GroupDescription: 'Application Load Balancer Security Group'
      VpcId: !FindInMap [ RegionSpecificParameters, !Ref "AWS::Region", vpc ]
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref LoadBalancerName
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      Subnets: !FindInMap [ RegionSpecificParameters, !Ref "AWS::Region", subnets ]
      SecurityGroups:
      - !Ref LBSecurityGroup

  IMDSDNSRecord:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      HostedZoneName: !FindInMap [ LoadBalancerParams, !Ref ServiceStage, hostedzonename ]
      Comment: DNS name for my instance
      Name: !Join
        - '.'
        - - !Join
            - '-'
            - - !FindInMap
                - LoadBalancerParams
                - !Ref ServiceStage
                - servicedomain
              - !Ref 'AWS::Region'
          - !FindInMap
            - LoadBalancerParams
            - !Ref ServiceStage
            - hostedzonename
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !FindInMap [ RegionSpecificParameters, !Ref "AWS::Region", hostedzoneid ]

Outputs:
  ELBDNSName:
    Description: 'DNS Name for the load balancer'
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${ECSServiceName}-ELBDNSName'
