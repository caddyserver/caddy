ROOT_NAME := aqfer
SERVICE_NAME := imds
SERVICE_VERSION := 0
REPO_REGION := us-east-1

APP_LOG_GROUP_NAME := aqfer.io

EC_CLUSTER_NAME := elasticache${ROOT_NAME}${DBVERSION}

# only needed on first run, to make clean aws docker image
.PHONY: setup
setup: aws_build

# deployment environment image
.PHONY: aws_build
aws_build:
	docker build --no-cache -f aqfer/Dockerfile.aws -t aws_image .

.PHONY: startover_locally
startover_locally: build_caddy_image run_locally
	docker-compose -f aqfer/docker-compose.yml up

.PHONY: run_locally
run_locally:
	docker-compose -f aqfer/docker-compose.yml up

# has to be run after databases are up or else the caddyfile database sections will point to nothing
.PHONY: update_container_repo
update_container_repo: ready_caddyfile ecr_repo_push

.PHONY: ready_caddyfile
ready_caddyfile: get_db_endpoints
	cat aqfer/Caddyfile_template | sed 's/APP_LOG_GROUP_NAME/'${APP_LOG_GROUP_NAME}'/g' > /tmp/Caddyfile
	cat /tmp/Caddyfile | sed 's/EC_ENDPOINT/'$(shell cat /tmp/ec_endpoint)'/g' > aqfer/Caddyfile

.PHONY: get_db_endpoints
get_db_endpoints:
	docker-compose -f aqfer/docker-compose-aws.yml run aws-service /scripts/ec_endpoint.sh ${EC_CLUSTER_NAME} 2>&1 > /tmp/ec_endpoint

.PHONY: ecr_repo_push
ecr_repo_push: build_caddy_image ecr_push

.PHONY: build_new_caddy_image
build_new_caddy_image: build_caddy
	docker build --no-cache -f aqfer/Dockerfile.caddy -t ${ROOT_NAME}_${SERVICE_NAME}:${SERVICE_VERSION} .

.PHONY: build_caddy_image
build_caddy_image: build_caddy
	docker build -f aqfer/Dockerfile.caddy -t ${ROOT_NAME}_${SERVICE_NAME}:${SERVICE_VERSION} .

.PHONY: build_caddy
build_caddy:
	cd caddy && go run build.go --goos linux

.PHONY: ecr_push
ecr_push:
	cd aqfer/scripts && go get ./.. && go run push-docker-image.go ${ROOT_NAME}_${SERVICE_NAME} ${SERVICE_VERSION} ${REPO_REGION}

.PHONY: run_unit_tests
run_unit_tests:
	docker-compose -f aqfer/docker-compose.yml run caddy /run_unit_tests.sh