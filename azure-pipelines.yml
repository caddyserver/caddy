# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

strategy:
  matrix:
    linux:
      imageName: ubuntu-16.04
      gorootDir: /usr/local
    mac:
      imageName: macos-10.13
      gorootDir: /usr/local
    windows:
      imageName: windows-2019
      gorootDir: C:\

pool:
  vmImage: $(imageName)

variables:
  GOROOT: $(gorootDir)/go
  GOPATH: $(system.defaultWorkingDirectory)/gopath
  GOBIN:  $(GOPATH)/bin

steps:
- bash: |
    latestGo=$(curl "https://golang.org/VERSION?m=text")
    echo "##vso[task.setvariable variable=LATEST_GO]$latestGo"
    echo "Latest Go version: $latestGo"
  displayName: "Get Go version"

- bash: |
    sudo rm -f $(which go)
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: Remove old Go and set GOBIN/GOROOT

# Linux
- bash: |
    wget "https://dl.google.com/go/$(LATEST_GO).linux-amd64.tar.gz"
    sudo tar -C $(gorootDir) -xzf "$(LATEST_GO).linux-amd64.tar.gz"
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Install Go on Linux
# macOS
- bash: |
    wget "https://dl.google.com/go/$(LATEST_GO).darwin-amd64.tar.gz"
    sudo tar -C $(gorootDir) -xzf "$(LATEST_GO).darwin-amd64.tar.gz"
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: Install Go on macOS
# Windows
- bash: |
    wget "https://dl.google.com/go/$(LATEST_GO).windows-amd64.zip"
    sudo unzip "$(LATEST_GO).darwin-amd64.zip" -d $(gorootDir)
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Install Go on Windows


- bash: |
    env
    which go
    go version
  displayName: 'Print Go and environment'

- script: |
    go get -v -t -d ./...
    go test -race ./...
  displayName: 'Run tests'