// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/lucas-clemente/quic-go/handshake (interfaces: ConnectionParametersManager)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	handshake "github.com/lucas-clemente/quic-go/handshake"
	protocol "github.com/lucas-clemente/quic-go/protocol"
	time "time"
)

// Mock of ConnectionParametersManager interface
type MockConnectionParametersManager struct {
	ctrl     *gomock.Controller
	recorder *_MockConnectionParametersManagerRecorder
}

// Recorder for MockConnectionParametersManager (not exported)
type _MockConnectionParametersManagerRecorder struct {
	mock *MockConnectionParametersManager
}

func NewMockConnectionParametersManager(ctrl *gomock.Controller) *MockConnectionParametersManager {
	mock := &MockConnectionParametersManager{ctrl: ctrl}
	mock.recorder = &_MockConnectionParametersManagerRecorder{mock}
	return mock
}

func (_m *MockConnectionParametersManager) EXPECT() *_MockConnectionParametersManagerRecorder {
	return _m.recorder
}

func (_m *MockConnectionParametersManager) GetHelloMap() (map[handshake.Tag][]byte, error) {
	ret := _m.ctrl.Call(_m, "GetHelloMap")
	ret0, _ := ret[0].(map[handshake.Tag][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnectionParametersManagerRecorder) GetHelloMap() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHelloMap")
}

func (_m *MockConnectionParametersManager) GetIdleConnectionStateLifetime() time.Duration {
	ret := _m.ctrl.Call(_m, "GetIdleConnectionStateLifetime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockConnectionParametersManagerRecorder) GetIdleConnectionStateLifetime() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetIdleConnectionStateLifetime")
}

func (_m *MockConnectionParametersManager) GetMaxIncomingStreams() uint32 {
	ret := _m.ctrl.Call(_m, "GetMaxIncomingStreams")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockConnectionParametersManagerRecorder) GetMaxIncomingStreams() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaxIncomingStreams")
}

func (_m *MockConnectionParametersManager) GetMaxOutgoingStreams() uint32 {
	ret := _m.ctrl.Call(_m, "GetMaxOutgoingStreams")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockConnectionParametersManagerRecorder) GetMaxOutgoingStreams() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaxOutgoingStreams")
}

func (_m *MockConnectionParametersManager) GetMaxReceiveConnectionFlowControlWindow() protocol.ByteCount {
	ret := _m.ctrl.Call(_m, "GetMaxReceiveConnectionFlowControlWindow")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

func (_mr *_MockConnectionParametersManagerRecorder) GetMaxReceiveConnectionFlowControlWindow() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaxReceiveConnectionFlowControlWindow")
}

func (_m *MockConnectionParametersManager) GetMaxReceiveStreamFlowControlWindow() protocol.ByteCount {
	ret := _m.ctrl.Call(_m, "GetMaxReceiveStreamFlowControlWindow")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

func (_mr *_MockConnectionParametersManagerRecorder) GetMaxReceiveStreamFlowControlWindow() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaxReceiveStreamFlowControlWindow")
}

func (_m *MockConnectionParametersManager) GetReceiveConnectionFlowControlWindow() protocol.ByteCount {
	ret := _m.ctrl.Call(_m, "GetReceiveConnectionFlowControlWindow")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

func (_mr *_MockConnectionParametersManagerRecorder) GetReceiveConnectionFlowControlWindow() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetReceiveConnectionFlowControlWindow")
}

func (_m *MockConnectionParametersManager) GetReceiveStreamFlowControlWindow() protocol.ByteCount {
	ret := _m.ctrl.Call(_m, "GetReceiveStreamFlowControlWindow")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

func (_mr *_MockConnectionParametersManagerRecorder) GetReceiveStreamFlowControlWindow() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetReceiveStreamFlowControlWindow")
}

func (_m *MockConnectionParametersManager) GetSendConnectionFlowControlWindow() protocol.ByteCount {
	ret := _m.ctrl.Call(_m, "GetSendConnectionFlowControlWindow")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

func (_mr *_MockConnectionParametersManagerRecorder) GetSendConnectionFlowControlWindow() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSendConnectionFlowControlWindow")
}

func (_m *MockConnectionParametersManager) GetSendStreamFlowControlWindow() protocol.ByteCount {
	ret := _m.ctrl.Call(_m, "GetSendStreamFlowControlWindow")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

func (_mr *_MockConnectionParametersManagerRecorder) GetSendStreamFlowControlWindow() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSendStreamFlowControlWindow")
}

func (_m *MockConnectionParametersManager) SetFromMap(_param0 map[handshake.Tag][]byte) error {
	ret := _m.ctrl.Call(_m, "SetFromMap", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnectionParametersManagerRecorder) SetFromMap(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFromMap", arg0)
}

func (_m *MockConnectionParametersManager) TruncateConnectionID() bool {
	ret := _m.ctrl.Call(_m, "TruncateConnectionID")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockConnectionParametersManagerRecorder) TruncateConnectionID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TruncateConnectionID")
}
